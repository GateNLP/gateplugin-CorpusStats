<project name="gateplugin-CorpusStats" basedir="." default="jar">

  <property file="build.properties" />

  <!-- Name of the plugin -->
  <property name="plugin.name" value="gateplugin-CorpusStats"/>

  <!-- Make environment variables available -->
  <property environment="env" />

  <!-- If environment variable GATE_HOME is set, use it for
       gate.home (unless it was already set in build.properties -->
  <condition property="gate.home" value="${env.GATE_HOME}">
    <isset property="env.GATE_HOME"/>
  </condition>

  <!-- If gate.home is not set from build.properties or the 
       environment variable GATE_HOME, assume that this
       plugin is in GATE Developer's plugin directory -->
  <property name="gate.home" location="../.." />

  <!-- location of GATE lib directory - should be inferred from gate.home -->
  <property name="gate.lib" location="${gate.home}/lib" />

  <!-- location of gate.jar - should be inferred from gate.home -->
  <property name="gate.jar" location="${gate.home}/bin/gate.jar" />

  <!-- Source directory - contains the Java source files for this plugin -->
  <property name="src.dir" location="src/main/java" />
  <property name="src-test.dir" location="src/test/java" />

  <!-- directory to contain the compiled classes -->
  <property name="classes.dir" location="classes" />
  <property name="classes-test.dir" location="classes/test" />

  <!-- documentation directory -->
  <property name="doc.dir" location="doc" />

  <!-- JavaDoc documentation directory -->
  <property name="javadoc.dir" location="${doc.dir}/javadoc" />

  <!-- lib directory - put any additional JAR files your plugin requires into
       this directory.  You will also need to add them as <JAR> entries in
       creole.xml -->
  <property name="lib.dir" location="lib" />

  <!-- location for the generated JAR file -->
  <property name="jar.location" location="${plugin.name}.jar" />

  <path id="gate.classpath">
    <pathelement location="${gate.jar}" />
    <fileset dir="${gate.lib}">
      <include name="**/*.jar" />
      <include name="**/*.zip" />
    </fileset>
  </path>


  <!-- Classpath to compile - includes gate.jar, GATE/lib/*.jar and any local
       library JAR files. -->
  <path id="compile.classpath">
    <path refid="gate.classpath" />
    <fileset dir="${lib.dir}" includes="**/*.jar" /> 
  </path>

  <path id="compile-test.classpath">
    <path refid="compile.classpath" />
    <pathelement location="${jar.location}" />
  </path>
 
  <path id="test.classpath">
    <path refid="compile.classpath" />
    <pathelement location="${jar.location}" />
    <dirset dir="${classes-test.dir}">
    </dirset>
  </path>


  
  <!--====================== Targets ============================-->
  
  <!-- create build directory structure -->
  <target name="prepare">
    <mkdir dir="classes"/>
    <mkdir dir="classes/main"/>
    <mkdir dir="classes/test"/>
  </target>

  <!-- compile the source -->
  <target name="compile" depends="prepare">
    <javac classpathref="compile.classpath"
           deprecation="true"
           srcdir="${src.dir}"
           destdir="${classes.dir}"
           debug="true"
           debuglevel="lines,source"
    	   encoding="UTF-8"
           source="1.8"
           target="1.8" />
  </target>

  <!-- compile the tests source -->
  <target name="compile-test" depends="jar">
    <javac classpathref="compile-test.classpath"
           srcdir="${src-test.dir}"
           destdir="${classes-test.dir}"
           deprecation="true"
           debug="true"
           debuglevel="lines,source"
           source="1.8" 
           target="1.8">
       <compilerarg value="-Xlint:unchecked"/>
     </javac>
  </target>

  <target name="test" depends="compile-test">
    <junit fork="true">
      <classpath refid="test.classpath" />
      <formatter type="brief" usefile="false" />
      <formatter type="brief" usefile="true" />
      <formatter type="xml" />
      <test name="gate.plugin.corpusstats.tests.SuiteAllTests" />
    </junit>
    <delete file="info.yaml"/>
    <delete file="lf.model"/>
    <delete file="pipe.pipe"/>
  </target>



  <!-- copy resources (anything non-.java) from src to classes -->
  <target name="copy.resources" depends="prepare">
    <copy todir="${classes.dir}">
      <fileset dir="${src.dir}" excludes="**/*.java" />
    </copy>
  </target>

  <!-- create the JAR file -->
  <target name="jar" depends="compile, copy.resources" >
    <jar destfile="${jar.location}"
         update="false"
         basedir="${classes.dir}" />
  </target>

  <!-- remove the generated .class files -->
  <target name="clean.classes" >
    <delete dir="${classes.dir}" />
  </target>

  <!-- clean resources generated by tests -->
  <target name="clean.tests">
    <delete>
      <fileset dir="." includes="TEST*.xml" />
    </delete>
  </target>

  <!-- Clean up - remove .class and .jar files -->
  <target name="clean" depends="clean.classes, clean.tests" >
    <delete file="${jar.location}" />
  </target>

  <!-- Clean up everything, including Javadoc -->
  <target name="docclean" depends="clean, clean.javadoc" >
  </target>

  <!-- Build JavaDoc documentation -->
  <target name="doc.prepare">
    <mkdir dir="${javadoc.dir}" />
  </target>

  <!-- Clean JavaDoc documentation -->
  <target name="clean.javadoc">
    <delete dir="${javadoc.dir}" />
  </target>

  <target name="javadoc" depends="doc.prepare">
    <javadoc destdir="${javadoc.dir}" packagenames="*"
             classpathref="compile.classpath"
             encoding="UTF-8"
             windowtitle="${plugin.name} JavaDoc"
             source="1.5">
      <sourcepath>
        <pathelement location="${src.dir}" />
      </sourcepath>
      <link href="http://java.sun.com/j2se/1.5.0/docs/api/" />
      <link href="../../../../doc/javadoc/" />
    </javadoc>
  </target>

  <!-- Build everything - the code and JavaDoc -->
  <target name="all" depends="jar, javadoc" />

  <!-- Other targets used by the main GATE build file:
         build: build the plugin - just calls "jar" target
         test : run the unit tests - there aren't any
         distro.prepare: remove intermediate files that shouldn't be in the
                         distribution
  -->
  <target name="build" depends="jar" />
  <target name="distro.prepare" depends="clean.classes, clean.tests" />

</project>
